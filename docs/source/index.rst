Посібник з найменування ресурсів
###########

Огляд
**********

Часто нам потрібно дати назву певному ресурсу, мітку, яка допоможе зрозуміти та пояснити, що це таке.
Ресурси, такі як файли, сервери, таблиці, поля, події у веб-аналітиці, документи, бізнес-концепції, терміни, метрики тощо, представляють елементи або об'єкти, які використовуються в інформаційних системах або програмному забезпеченні для зберігання, обробки, передачі чи представлення даних.
Ресурсам потрібні назви, щоб ми могли їх знайти, описати, повторно використати, посилатися на них або зв’язуватися з ними, фіксувати, хто їх власник, та взаємодіяти з ними іншими способами.
Але найменування - це не просто присвоєння послідовності символів.
У різних сферах назви, що надаються ресурсам, визначаються правилами, галузевими нормами або технологічними факторами.
Ми обговоримо деякі проблеми найменування та принципи, які допомагають нам називати речі корисним способом.

Чому це так важливо?

Найменування може бути пов'язане з нашим розумінням сутності речей. Це стає очевидним, коли ми використовуємо назви, які точно описують або відображають основні аспекти предмета.
Це може допомогти не лише у точній ідентифікації, але й у створенні глибшого усвідомлення взаємозв'язків і взаємодій у досліджуваній предметній області. 

.. note::
   "Господь Бог утворив із землі всіх диких тварин і всіх птахів небесних.
   І привів їх до людини, щоб побачити, як він їх назве; і як людина назве кожну живу істоту, таке й буде її ім’я."
   Буття 2:19

| Іменування у цьому контексті має символічне значення. У давніх суспільствах ім’я було надзвичайно важливим.
| Даючи Адаму можливість називати тварин, Бог демонструє довіру і віру в його здатність сприймати і розуміти світ.
| Процес називання тварин також можна інтерпретувати як дар участі та управління для людей.
| Це представляє можливість для людей продемонструвати турботу та знання про світ навколо них, підкреслюючи відповідальність за навколишній світ.

Присвоєння імен будь-чому, від бренду до концепцій, може бути складним процесом, і його можна виконати добре або погано.
Тож давайте розглянемо як основні проблеми яких можно уникати та основні способи та підходи як можна робити імена та назви гарними.

Проблеми найменування
**********


Двозначність і проблема словникового запасу
===========


| Немає абсолютного найкращого слова для найменування чогось — це відомо як проблема словникового запасу.  
| Природні мови надають багато варіантів для вираження ідей. Як правило, існує кілька слів для позначення одного і того ж об'єкта або концепції.  
| Люди обирають назви або описи речей на основі свого досвіду та контексту, тому часто виникають розбіжності в тому, які слова вони використовують.  
| Це часто дивує людей, оскільки те, що здається природним ім’ям для однієї особи, може не бути таким же для іншої.


Омонімія, полісемія та помилкові споріднення
===========

| Слова, що звучать однаково, слова з кількома значеннями та слова, що виглядають подібно, але мають різні значення.  
| Іноді одне й те саме слово може позначати різні ресурси: ``bank`` може означати фінансову установу або край річки.  
| Ресурси з назвами, що звучать однаково або мають багато значень, можуть бути неправильно ідентифіковані або переплутані, особливо автоматичними процесами, які не можуть використовувати здоровий глузд чи контекст.


Назви з небажаними асоціаціями
===========

Такі асоціації можуть призвести до поганих назв і репутаційних помилок.

.. note::
   Наприклад, числа можуть мати різні асоціації в різних культурах: в одній культурі число 8 цінується за свою асоціацію з багатством, тоді як в іншій числу 4 бояться через його зв'язок з смертю, або будівлі пропускають 13-й поверх у західних культурах через забобони.

Деякі продукти мають проблеми через мовні відмінності.
Коли слово має інше значення в іншій мові, це може призвести до гумору або непорозумінь.
``Gift`` німецькою означає ``отрута``, а ``pain`` французькою означає ``хліб``.

.. note::
   Наприклад, Mitsubishi Pajero мав негативні конотації в іспанській мові, тому в США його назвали Montero, щоб уникнути негативних асоціацій і підтримати позитивний імідж.

Ігнорування упереджень і ідей про назви може здаватися незначним, але це може мати негативні наслідки.


Упередженість
===========

| Алфавітна упередженість:
| Хоча організація ресурсів за алфавітом може здаватися справедливою, вона може вводити упередження на користь імен, які починаються з літер, розташованих на початку алфавіту.
| Це створює ситуацію, коли ресурси, розташовані раніше, отримують перевагу, нехтуючи достоїнствами та потенціалом інших.

| Обмеження довжини:
| Системи, які обмежують довжину імен, можуть створити незручності для осіб з довшими іменами, що призводить до скорочення або виключення частин їхніх імен. Наприклад ранні версії баз данних підтримували назви таблиц та полей до 30 символів.

| Локалізація:
| Коли системи не адаптовані до різних регіонів або мов, вони можуть не враховувати специфічні звичаї найменування або варіації, що призводить до виключення або викривлення інформації.


Назви, що передбачають непостійні атрибути
===========

Багато ресурсів отримують назви на основі атрибутів, які можуть стати проблемними згодом, якщо значення або інтерпретація цього атрибуту зміняться.

.. note::
   "Kentucky Fried Chicken" був заснований у 1930 році як невелике кафе в Корбіні, штат Кентуккі, і став однією з перших міжнародних мереж швидкого харчування. У 1987 році вони відкрили свій перший ресторан у Китаї й незабаром скоротили назву до "KFC", враховуючи, що багато людей за межами Кентуккі, наприклад у Пекіні чи Лондоні, можуть не бути знайомі з їхнім розташуванням.

Деякі компанії використовують дати або роки в своїх назвах, щоб підкреслити орієнтацію на майбутнє.

.. note::
   Наприклад, кіностудія "20th Century Fox" обрала цю назву у 1930-х роках, щоб підкреслити свою прогресивність і орієнтацію на майбутнє, але сьогодні така назва може мати протилежний ефект.


Семантичний розрив
===========

Семантичний розрив відноситься до недостатнього розуміння інформації, що зберігається в даних.  
Цей брак розуміння може варіюватися між користувачами або між користувачами і творцями даних.  
Він виникає через різницю в описанні та найменуванні ресурсів, коли автоматизовані процеси використовують технічні, але непоінформативні етикетки, які відрізняються від людських уподобань.

Назви, такі як ``IMG30467.jpg`` на цифровому фото, можуть мати сенс для камери під час послідовного зберігання зображень, але вони є незручними для людей.  
Ми надаємо перевагу назвам, які описують зміст зображення, наприклад, ``MyBeautifulGarden.jpg``.


Довгі назви
===========

Дуже довгі назви можуть бути важкими для використання і роблять код неохайним.  
Додавання занадто багато інформації до назв може зробити їх заплутаними та повторювати одні й ті ж відомості.


Непослідовність
===========

Відсутність єдиного стилю найменування призводить до плутанини всередині проекту або між різними проектами.

.. note::
   У 2008 році співробітник Last.fm, відповідальний за рекомендації музики, Річард Джонс, склав список з 100 найчастіше описуваних записів кавер-версії пісні Боба Ділана "Knockin' on Heaven's Door" у виконанні Guns N' Roses.


.. code-block:: concole
   :caption: Top 25 Representations of "Knockin' On Heaven's Door"
   :linenos:

    Guns N' Roses - Knockin' On Heaven's Door
    Guns N' Roses - Knocking On Heavens Door
    Guns 'N' Roses - Knockin On Heaven's Door
    Guns N' Roses - Knockin On Heavens Door
    Guns N' Roses - Knockin' On Heavens Door
    Guns N'roses - knockin on heavens door
    Guns N' Roses - Knocking On Heaven's Door
    Guns N Roses - Knockin' On Heaven's Door
    Guns N Roses - Knockin On Heavens Door
    Guns And Roses - Knocking On Heavens Door
    Guns Nroses - Knockin On Heavens Door
    Guns'n' Roses - Knockin' On Heaven's Door
    Guns N Roses - Knocking On Heavens Door
    Guns'n'Roses - Knockin' On Heaven's Door
    Guns 'N Roses - Knockin' On Heaven's Door
    Guns & Roses - Knockin' on Heaven's Door
    Guns N'roses - Knockin' On Heaven's Door
    Guns and Roses - Knockin' On Heaven's Door
    Guns n Roses - Knocking On Heavens Door
    Guns 'n' Roses - Knockin' On Heavens Door
    Aerosmith - Knocking On Heaven's Door
    Guns 'n Roses - Knocking On Heaven's Door
    Guns 'n' Roses - Knocking On Heavens Door
    Guns N Roses - Knocking On Heaven's Door
    Guns N' Roses - Heaven's Knockin On Door

Непослідовне використання великих і малих літер робить назви менш читабельними і складнішими для ідентифікації.

  .. code-block:: concole

    ├── Documents
        ├── best_practice
        ├── important-item
        ├── InterestingTopic
        ├── myFile
        ├── new-element
        ├── OurData
        ├── randomKey
        ├── small-project
        └── your_resource


Нечіткі абревіатури та акроніми
===========

| Проблема нечітких абревіатур виникає, коли проекти або команди використовують абревіатури чи акроніми, які не пояснені або не є загальновідомими.
| Це може призвести до непорозумінь серед членів команди, плутанини всередині проекту і навіть конфліктів через різні інтерпретації абревіатур.

Наприклад, абревіатура **JK** може відноситися до співробітника Джона Ковальського, але не всі можуть зрозуміти це. **PM** може означати Project Manager або Product Marketing, що викликає плутанину в контексті.

Такі терміни як:
   * ``PDCA`` -> Plan-Do-Check-Act
   * ``TPS`` -> Transactions Per Second
   * ``SPA`` -> Single Page Application
   * ``DNA`` -> Deoxyribonucleic Acid
   * ``STEM`` -> Science, Technology, Engineering, Mathematics
   * ``CAGR`` -> Compound Annual Growth Rate
можуть бути незрозумілі для непрофесіоналів або новачків
   

Нечіткі назви
===========

Names that don't show what something is can make it hard to use and cause mistakes or slow work down.

``temp``
  Ця назва може використовуватися для тимчасових змінних у коді, таблицях чи каталогах, але вона не надає інформації про те, що саме зберігається в цій змінній або для чого вона використовується.
``misc``
  Абревіатура для "miscellaneous" (різне), часто використовувана для групування різних елементів. Однак ця назва не є інформативною, оскільки не вказує на конкретні компоненти або мету цієї групи.
``data``
  Назва 'data' може використовуватися для різних наборів даних, але сама по собі вона не передає характер або формат цих даних.
``new``
  Такі назви можуть стати проблематичними з часом, оскільки залишаються невизначеними і стають менш інформативними, коли **новизна** згасає або з'являється нова версія.
  У деяких випадках ви можете зустріти абревіатури типу **new_new** або **newer**, що вказують на те, що щось було новим, але тепер стало застарілим або заміненим новішою версією.


Вибір хороших назв і ідентифікаторів
**********

Зробіть назви інформативними
===========

| Найбільш основний принцип найменування — вибрати інформативні назви, які сприяють розумінню.  
| Використовуйте назви, які є інтуїтивно зрозумілими та легкими для запам'ятовування.  
| Уникайте використання загальних або універсальних назв.

Уникайте надто довгих назв
===========

| Це правило говорить про те, що дуже довгі назви ускладнюють розуміння і можуть зменшити ефективність роботи.  
| Крім того, коротші назви зменшують ймовірність наявності двох назв, які є однаковими, але в різному порядку слів.  
| Це правило найменування схоже на **Бритву Оккама**, що пропонує, що найпростіше рішення часто є найкращим.  
| Важливо скоротити назви до їхньої основної сутності, видаляючи непотрібні слова чи фрази.

.. tip::
   | calculate_total_sum_of_items_in_shopping_cart_and_apply_discount_and_add_tax
   | ↓
   | **calculate_final_cost**

   | employeeSalaryIncreaseAfterTaxAndDeductions
   | ↓
   | **netSalary**

   | Plan for project execution based on risk analysis and accounting for internal factors
   | ↓
   | **Adaptive project execution plan**

   | introduction_to_the_card_issuance_process
   | ↓
   | **card_issue_intro**

| Визначте основні ключові слова або концепції, які є найважливішими для опису об'єкта або процесу.  
| Потім використовуйте їх у стислому вигляді. Якщо деталі або специфікації не є критичними для розуміння, їх можна спростити або виключити з назви.  
| Існує також техніка, відома як **зменшення до сенсу** або **зменшення до основного значення**.  
| Це означає систематичне видалення слів або частин фрази, зберігаючи основне значення, і зупинка, коли подальше видалення призведе до втрати сенсу.

.. tip::
   | Ви можете поступово видаляти слова:
   | Наприклад, розглянемо довгу назву
   | Adaptive project execution plan based on risk analysis and internal factors
   | └── Adaptive project execution plan based on risk analysis and internal factors
   |     └── Adaptive project execution plan based on risk analysis
   |         └── Adaptive project execution plan
   |             └── Project execution plan

   Продовжуючи таким чином, поки не буде збережено основне значення.


Послідовність
**********

| Послідовність — це характеристика, яка відображає ступінь стабільності, однорідності або постійності в чомусь.  
| Збереження єдиного стилю найменування протягом всього проекту або організації допомагає досягти цього.  
| Використання правил найменування робить код або системи виглядати однорідно та легким для читання. Це допомагає людям працювати разом і обмінюватися інформацією між розробниками, аналітиками та іншими учасниками проекту.

Стандарти та конвенції можуть безпосередньо стосуватися форматування, наприклад, вибору переважного стилю для складених назв.

``camelCase``
  Кожне нове слово починається з великої літери, без пробілів. Приклад: myVariableName, calculateInterestRate.
``PascalCase``
  Схоже на camelCase, але перша літера також написана з великої літери. Зазвичай використовується для назв класів і типів даних. Приклад: MyClass, CalculateInterest.
``snake_case``
  Слова розділені підкресленням, зазвичай у всіх малих літерах. Приклад: my_variable_name, calculate_interest_rate.
``kebab-case``
  Слова розділені дефісом, зазвичай у всіх малих літерах. Часто використовуються в URL-адресах та іменах файлів. Приклад: my-variable-name, calculate-interest-rate.
``MixedCase``
  Представляє змішаний стиль, де різні частини слів можуть мати різні регістри. Приклад: iOSDevelopment, JavaScriptProgramming.

Правила також можуть стосуватися порядку складених слів, їхніх суфіксів і префіксів.

.. tip::
  | Наприклад, послідовне використання слова "intro" в кінці при найменуванні екранів у мобільному додатку:
  | `splash_intro`, `select_country_intro`, `select_product_intro`, `verify_income_intro`, `account_app_intro`, `card_issue_intro`, etc. 
  | Важливо підтримувати однорідність.

Для складних систем, таких як сховища даних, зазвичай розробляються конвенції, що використовують семантичні правила для пояснення значення об'єкта через його назву.

| Берегова охорона США має * DATA ELEMENT NAMING STANDARDS* та є еталонним прикладом. (Цей документ легко знайти у відкритому доступі)
| Назва об'єкта даних складається з термінів, поділених на три категорії: 

``Prime Words``:
  | Сутності або фрази, що описують предмет або основне значення назви.  
  | Показують місце елемента даних у логічному контексті інформаційної моделі.  
  | Наприклад: ``PARTY``, ``DEAL``, ``CLIENT``, ``EMPLOYEE``, ``CURRENCY``  
  | Основне слово надає значення назві атрибуту, забезпечуючи правильний контекст для модифікатора та класифікаційних слів.  
  | Хоча стандартного списку основних слів не існує, терміни, що зазвичай підходять як предмети, зазвичай є іменниками, що представляють загальні речі для будь-якої організації.  
  | Крім того, основні слова можуть складатися з кількох термінів, але лаконічність є важливою для того, щоб вмістити решту номінальної групи в розумний розмір назви.

``Classifying Words``:
  | Вказують на категорійну диференціацію або класифікацію інформації.  
  | Описують основну категорію даних, пов'язану з інформаційним елементом.  
  | Наприклад: ``DATE``, ``AMOUNT``, ``QUANTITY``, ``CODE``, ``NAME``, ``DESCRIPTION``, ``IDENTIFIER``, ``RATE``

``Modifiers``:
  | Додають опис, що міститься в основному слові та класифікаційних словах.  
  | Забезпечують ясність і унікальність назви об'єкта даних.  
  | Налаштовують основне слово та класифікаційні слова.  
  | Обмежують значення класифікаційних слів і основних слів.  
  | Наприклад: ``FIRST``, ``LAST``, ``NEXT``, ``BEGIN``, ``END``, ``MAX``, ``MIN``

Для складних імен атрибутів у таблиці бази даних послідовність може виглядати наступним чином:

.. figure:: /_static/attribute.png
   :width: 150%
   :align: center
   :alt: attribute naming rule

Коренева частина імені атрибута є класовим словом, яке класифікує тип інформації, що представлена атрибутом.

e.g.: PERMANENT_EMPLOYEE_LAST_NAME
  | NAME -> Class Word
  | LAST -> Modifier 2
  | EMPLOYEE -> Prime Word
  | PERMANENT -> Modifier 1

| Абревіатури та акроніми можуть бути використані, і тоді ім'я поля може виглядати як PERM_EMPL_LST_NAME, що все ще є читабельним і зрозумілим.  
| Ця техніка раніше використовувалася, коли були жорсткіші обмеження на довжину імен у базах даних, такі як обмеження в 30 символів.

Уникайте абревіатур і акронімів
**********
| Назви слід писати повністю, коли це можливо, замість використання абревіатур або акронімів.  
| Абревіатури можуть викликати плутанину або неоднозначність і можуть бути не зрозумілі всім членам команди або зацікавленим сторонам, особливо новачкам.

Однак можливе використання усталених абревіатур або акронімів, що є загальнозрозумілими в конкретній області:

* API -> application programming interface
* ROI -> return on investment
* KPI -> key performance indicator
* CRM -> customer relationship management

Документуйте ваші назви
**********
| Коли це необхідно, пояснюйте назви та їх значення членам команди.  
| Техніка документування назв передбачає надання пояснень до назв, особливо якщо вони можуть бути не очевидними або містять специфічні значення.  
| Це допомагає зацікавленим сторонам краще зрозуміти контекст і мету використання.

Наприклад:

``calculate_tax``
  Назва сама по собі може бути доброю, але додавання опису уточнює, який саме податок розраховується.
``order_status``
  Додавання опису може уточнити можливі значення статусів та їх значення.
``employee_salary``
  Більш детальне пояснення може включати, як розраховується зарплата співробітника та які параметри враховуються.


Використовуйте контрольовані словники
**********

| Один зі способів сприяти створенню хороших назв для конкретних областей ресурсів або завдань — це встановлення контрольованого словника.  
| Контрольований словник подібний до фіксованого або закритого словника, що включає терміни, які використовуються в певній галузі.  
| Це зменшує кількість використовуваних слів, мінімізує синонімію та омонімію, усуває небажані асоціації та зберігає набір слів з чітко визначеними значеннями та правилами їх використання.

| Контрольований словник — це не лише набір дозволених слів; він також включає їхні визначення і часто визначає правила, за якими терміни словника можуть бути використані та комбіновані.


Контекст
**********

| При найменуванні враховуйте контекст, у якому використовуються назви.  
| Переконайтеся, що назви мають сенс у рамках більшої системи або процесу.

| Використовуйте мову, специфічну для вашої бізнес-області, або знання, знайомі вашим користувачам або зацікавленим сторонам.  
| Наприклад:
* Oxford, Dictionary of Finance and Banking
* Forbes, A Glossary Of Basic Banking Terms


Використання псевдонімів
**********

Контрольований словник є дуже корисним для тих, хто його використовує, але при проектуванні організаційної системи для інших, які можуть не використовувати або не розуміти його, потрібно враховувати різноманітність слів, які вони можуть використовувати при пошуку або описі ресурсів.
Наприклад, офіційна назва певного виду риби — *"Amphiprion ocellaris"*, але більшість людей шукатиме її як *"клоунфіш"*, *"риба-анемон"*, або навіть під її більш популярною назвою з фільму Немо.
Пов'язаний механізм, що використовується системами пошуку, — це перевірка орфографії, де всі помилки в написанні розглядаються як псевдоніми для правильного терміна ("Чи не мали на увазі California?" коли ви написали Califorina).

Зробіть назви унікальними або придатними
**********

| Хоча назва відноситься до одного ресурсу, це не означає, що дві назви не можуть бути ідентичними.  
| Кожна назва або ідентифікатор повинні бути унікальними в межах їхньої облікової системи.  
| Ми можемо запобігти або зменшити конфлікти, додаючи інформацію про простір імен або домен, з якого вибираються назви або ідентифікатори, створюючи те, що часто називають повністю кваліфікованими назвами.  
| Наприклад, у США є кілька десятків міст з назвами "Springfield" і "Washington", але додавання кодів штатів до поштових адрес дозволяє розрізняти їх.


Обережно використовуйте зарезервовані слова
**********

| Уникайте використання зарезервованих слів у мовах програмування або інших обмеженнях платформ.  
| Зарезервовані слова — це ті, що мають спеціальне значення в межах мови програмування і не можуть використовуватися як імена змінних, функцій, класів тощо.  
| Ці слова зазвичай відображають синтаксис і семантику мови, визначаючи структуру та логіку програми.

| У SQL зарезервовані слова включають такі терміни, як ``SELECT``, ``FROM``, ``WHERE``, ``JOIN``, ``GROUP BY``, ``ORDER BY`` та інші.  
| Ці слова використовуються для запитів до баз даних і маніпулювання даними.

| У Python зарезервовані слова включають ``if``, ``else``, ``while``, ``for``, ``import``, ``def``, ``class``, ``try``, ``except`` та інші.  
| Ці слова використовуються для визначення умов, циклів, функцій, класів, виключень та різних аспектів програми.


Версії, модифікації та дати
**********

Включення версій у назви документів або дат у назви файлів може допомогти у визначенні хронологічного порядку та полегшити пошук і сортування.

| Рекомендується використовувати дати у форматі стандарту ISO8601 ``YYYY-MM-DD``.  
| Наприклад:  
| "2021-08-02 v2 Policies and procedures"

Додатково, різні етапи або статуси документа чи процесу можна позначати такими позначеннями, як ``vDraft``, ``vFinal``, ``vExecuted``, ``vPreRead`` тощо.


Тестування назв
**********

| Тестуйте назви на зрозумілість, чіткість і відповідність контексту.  
| Один зі способів уникнути непередбачених проблем — залучати людей до спільної роботи при виборі назв для ресурсів.  
| Інформаційні архітектори часто використовують колективні методи проектування для цієї мети, такі як карткова сортування або вільне розміщення.

.. toctree::
  :caption: Table of Contents
  :numbered:
